load "medit";
string directory = "/Users/amina/Dropbox (MIT)/MIT_postdoc/greedy_theory/Navier-Stokes/";
ifstream meshFile(directory+"meshdef.txt");
ifstream dataFile(directory+"data_LDR.txt");

// Mesh specifications
int meshdef;
meshFile>>meshdef;

real L, D, R;
dataFile >> L;
dataFile >> D;
dataFile >> R;

//Macros
macro Gradient(u) [dx(u), dy(u)] //
macro Divergence(ux, uy) (dx(ux) + dy(uy)) //
macro UgradV(ux,uy,vx,vy) [ [ux,uy]'*[dx(vx),dy(vx)] , [ux,uy]'*[dx(vy),dy(vy)] ]// EOM
	
mesh ThHole = readmesh(directory+"hole.msh");

fespace Uh2(ThHole, [P2b, P2b]);
fespace Ph2(ThHole, P1dc);

mesh ThBend = readmesh(directory+"bend.msh");

fespace Uh1(ThBend, [P2b, P2b]);
fespace Ph1(ThBend, P1dc);

mesh ThChannel = readmesh(directory+"channel.msh");

fespace Uh4(ThChannel, [P2b, P2b]);
fespace Ph4(ThChannel, P1dc);

mesh ThFlipbend = readmesh(directory+"flipbend.msh");

fespace Uh3(ThFlipbend, [P2b, P2b]);
fespace Ph3(ThFlipbend, P1dc);


ifstream compoFile(directory+"dockingFile.txt");
int nbComponents;
compoFile >> nbComponents;
int[int] compotype(nbComponents);
real[int] theta(nbComponents);
real[int] transx(nbComponents);
real[int] transy(nbComponents);
for (int ji=0;ji<nbComponents;ji++) { compoFile>>compotype[ji]; compoFile>>theta[ji]; compoFile>>transx[ji]; compoFile>>transy[ji];  }

mesh[int] Thref(4);
Thref[0] = ThHole;
Thref[1] = ThBend;
Thref[2] = ThChannel;
Thref[3] = ThFlipbend;

mesh[int] Thi(nbComponents);
mesh Th;
int rightlabel, leftlabel;
int[int,int] intermediatelabels(nbComponents-1,2);
// cout<< "nbComponents = " << nbComponents << endl;
for (int ji = 0; ji<nbComponents; ji+=1){
	// cout << "ji = "<< "compotype = " << compotype[ji] << " theta = " << theta[ji] << " transx = " << transx[ji] << " transy = " << transy[ji] << endl;
	int[int] r1;
	if (compotype[ji] == 0){
		r1 = [32,20+100*ji, 34,40+100*ji];//44
		}
	else{
		if (compotype[ji] == 1){
			r1 = [22,20+100*ji, 24,40+100*ji];//14
			}
		else{
			if (compotype[ji] == 2){
				r1 = [52,20+100*ji, 54,40+100*ji];//14
				}
			else{
				if (compotype[ji] == 3){
					r1 = [62,20+100*ji, 64,40+100*ji];//14
					}
				}
		}
	}
	Thi[ji] = change(Thref[compotype[ji]], label = r1);
	Thi[ji] = movemesh(Thi[ji], [x*cos(theta[ji])-y*sin(theta[ji])+transx[ji], x*sin(theta[ji])+y*cos(theta[ji])+transy[ji]]);
	if (ji >= 1){ 
		Th = Th + Thi[ji]; 
		if (ji == nbComponents-1) { leftlabel = r1[3];
									intermediatelabels(ji-1,1) = r1[1];}
		else{intermediatelabels(ji-1,1) = r1[1];
			 intermediatelabels(ji,0) = r1[3];}
	}
	else{ 
		Th = Thi[ji]; 
		rightlabel = r1[1];
		intermediatelabels(ji,0) = r1[3];
	}
}

// medit("river", Th);
savemesh(Th,directory+"river.msh");

//FEM space
fespace Uh(Th, [P2b, P2b]);
fespace Ph(Th, P1dc);

varf stiff([ux, uy],[vx, vy]) = int2d(Th)((Gradient(ux)' * Gradient(vx) + Gradient(uy)' * Gradient(vy)));
ofstream fstglob(directory+"Offline/matrices/stiff.txt");
matrix KK = stiff(Uh,Uh);
fstglob << KK << endl;

varf mass([ux, uy],[vx, vy]) = int2d(Th)(ux*vx + uy*vy);
matrix MM = mass(Uh,Uh);
ofstream fmass(directory+"Offline/matrices/mass.txt");
fmass << MM << endl;

// cout << "rightlabel = " << rightlabel << endl;
// cout << "leftlabel =" << leftlabel << endl;
ofstream dirFile(directory+"dirich_labels.txt");
dirFile << rightlabel ;
dirFile << endl ;
dirFile << leftlabel ;


/*

for (int ji = 0; ji<nbComponents; ji+=1){
	fespace Uhi(Thi[ji], [P2b, P2b]);
	fespace Phi(Thi[ji], P1dc);
	matrix BBcompoI = interpolate(Uhi, Uh);
	ofstream finterpol(directory+"Offline/matrices/interpolate_compo"+string(ji)+"_river.txt");
	finterpol << BBcompoI << endl;
	}	

ofstream intFile(directory+"intermediate_labels.txt");
intFile << intermediatelabels;
for (int ji = 0; ji<nbComponents-1; ji+=1){
	varf riBnd([ux, uy],[vx, vy]) = int1d(Th,intermediatelabels(ji,0),intermediatelabels(ji,1))(vx);
	real[int] Fri = riBnd(0,Uh);
	ofstream fri(directory+"Offline/matrices/X_P"+string(ji+1)+".txt");
	fri << Fri << endl;
	// Uh [bx,by];
	// bx[] = Fri;
	// by[] = Fri;
	// medit("Th", Th, [bx,by]);

	varf YriBnd([ux, uy],[vx, vy]) = int1d(Th,intermediatelabels(ji,0),intermediatelabels(ji,1))(vy);
	real[int] FriY = YriBnd(0,Uh);
	ofstream friY(directory+"Offline/matrices/Y_P"+string(ji+1)+".txt");
	friY << FriY << endl;
	// Uh [ax,ay];
	// ax[] = FriY;
	// ay[] = FriY;
	// medit("Th", Th, [ax,ay]);
}

varf riBnd([ux, uy],[vx, vy]) = int1d(Th,rightlabel)(vx);
real[int] Fri = riBnd(0,Uh);
ofstream fri(directory+"Offline/matrices/X_Pright.txt");
fri << Fri << endl;

varf YriBnd([ux, uy],[vx, vy]) = int1d(Th,rightlabel)(vy);
real[int] FriY = YriBnd(0,Uh);
ofstream friY(directory+"Offline/matrices/Y_Pright.txt");
friY << FriY << endl;


varf leBnd([ux, uy],[vx, vy]) = int1d(Th,leftlabel)(vx);
real[int] Fle = leBnd(0,Uh);
ofstream fle(directory+"Offline/matrices/X_Pleft.txt");
fle << Fle << endl;

varf YleBnd([ux, uy],[vx, vy]) = int1d(Th,leftlabel)(vy);
real[int] FleY = YleBnd(0,Uh);
ofstream fleY(directory+"Offline/matrices/Y_Pleft.txt");
fleY << FleY << endl;

varf dirout2([ux, uy],[vx, vy]) = int1d(Th,rightlabel,leftlabel)(vx+vy);
real[int] Ydir2 = dirout2(0,Uh);
ofstream f62(directory+"Offline/matrices/dir_bcs.txt");
f62 << Ydir2 << endl;

// Uh [ax,ay];
// ax[] = Ydir2;
// ay[] = Ydir2;
// medit("left",Th, [ax,ay]);

func yval = y;
Uh [ix, iy] = [yval, yval];
ofstream fpe(directory+"Offline/matrices/Y.txt");	
fpe << iy[] << endl;

func xval = x;
Uh [iix, iiy] = [xval, xval];
ofstream fpex(directory+"Offline/matrices/X.txt");	
fpex << iix[] << endl;



// real theta1 = -pi/4;
// real trans1x = -L*cos(pi/4.)-3*D/2.*sin(pi/4.);
// real trans1y = L*sin(pi/4.)+3*D/2.*(1-cos(pi/4.));
//
// real theta2 = -pi/4;
// real trans2x = -L*cos(pi/4.)-3*D/2.*sin(pi/4.);
// real trans2y = L*sin(pi/4.)+3*D/2.*(1-cos(pi/4.));


// func rightparabolaX = -3./4.*(y^2-1.);
// func rightparabolaY = 0.;
// func XX = x+L*cos(pi/4.)+3*D/2.;
// func leftparabolaX = 0.;
// func leftparabolaY = -1.*-3./4.*(XX^2-1.);

// Uh [Fbcx,Fbcy] = [parabola*(x==L), -vectparabola*(abs(y-L*cos(pi/4.)-3*D/2.)<1e-10)];
// ofstream fbc(directory+"Offline/matrices/parabola.txt");
// fbc << Fbcx[] << endl;
*/
